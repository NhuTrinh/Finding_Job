import React, { useEffect, useState, useContext, } from 'react';
import { useParams, useNavigate} from 'react-router-dom';
import JobService from '../../services/JobService'; // b·∫°n n√™n c√≥ 1 service g·ªçi API
import { Container, Row, Col, Card, Button } from "react-bootstrap";
import company from '../../assets/img/company.jpg';
import Job from './Job'; // Gi·∫£ s·ª≠ b·∫°n c√≥ component Job ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch c√¥ng vi·ªác
import { getExpirationDateTwoMonthsLater } from '../../utils/expireDate';
import { AuthContext } from '../../contexts/AuthContext';

const JobDetail = () => {
    const { user } = useContext(AuthContext);
    const { id } = useParams();
    const [job, setJob] = useState(null);
    const navigate = useNavigate();

    useEffect(() => {
        const fetchJob = async () => {
            try {
                const res = await JobService.getJobById(id); // g·ªçi API l·∫•y job theo ID
                console.log("Job data:", res.data);
                setJob(res.data);
            } catch (error) {
                console.error("L·ªói khi l·∫•y chi ti·∫øt job:", error);
            }
        };

        fetchJob();
    }, [id]);

    const handleDeleteJob = async () => {
        const confirmDelete = window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° c√¥ng vi·ªác n√†y kh√¥ng?');
        if (!confirmDelete) return;

        try {
            await JobService.deleteJob(id, user.accessToken);
            alert('Xo√° c√¥ng vi·ªác th√†nh c√¥ng.');
            navigate('/employer/dashboard'); // ho·∫∑c '/employer/jobs' n·∫øu ph√π h·ª£p h∆°n
        } catch (err) {
            alert('L·ªói khi xo√° c√¥ng vi·ªác.');
            console.error(err);
        }
    };

    if (!job) return <p>ƒêang t·∫£i th√¥ng tin c√¥ng vi·ªác...</p>;

    return (
        <Container>
    <Button
        variant="link"
        className="mb-3 ps-0 text-success fw-bold"
        onClick={() => navigate('/employer/dashboard')}
    >
        ‚Üê Tr·ªü v·ªÅ Trang ch·ªß
    </Button>

    <Card className="p-4 shadow-lg rounded-4">
        <Row>
            <Col md={8}>
                <div className="mb-4 border-bottom pb-3">
                    <h2 className="mb-3 text-success">{job.title}</h2>
                    <p><strong>H√¨nh th·ª©c:</strong> {job.employmentType}</p>
                    <p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> {job.address.line}, {job.address.city}, {job.address.country}</p>
                    <p><strong>Ng√†y h·∫øt h·∫°n:</strong> {getExpirationDateTwoMonthsLater(job.createdAt)}</p>
                </div>

                <div className="mb-4 border-bottom pb-3">
                    <h5 className="mb-2 text-success" >üìù M√¥ t·∫£ c√¥ng vi·ªác</h5>
                    <p>{job.description}</p>
                </div>

                <div className="mb-4 border-bottom pb-3">
                    <h5 className="mb-2 text-success">üìå Y√™u c·∫ßu ·ª©ng vi√™n</h5>
                    {(job.skills?.length || job.jobExpertise?.length || job.jobDomain?.length) ? (
                        <>
                            {job.skills?.length > 0 && (
                                <div>
                                    <strong>K·ªπ nƒÉng:</strong>
                                    <ul>
                                        {job.skills.map((skill, index) => (
                                            <li key={index}>{skill}</li>
                                        ))}
                                    </ul>
                                </div>
                            )}
                            {job.jobExpertise?.length > 0 && (
                                <div>
                                    <strong>Chuy√™n m√¥n:</strong>
                                    <ul>
                                        {job.jobExpertise.map((item, index) => (
                                            <li key={index}>{item}</li>
                                        ))}
                                    </ul>
                                </div>
                            )}
                            {job.jobDomain?.length > 0 && (
                                <div>
                                    <strong>Lƒ©nh v·ª±c:</strong>
                                    <ul>
                                        {job.jobDomain.map((item, index) => (
                                            <li key={index}>{item}</li>
                                        ))}
                                    </ul>
                                </div>
                            )}
                        </>
                    ) : (
                        <p>Kh√¥ng c√≥ y√™u c·∫ßu c·ª• th·ªÉ</p>
                    )}
                </div>

                <div className="mb-4">
                    <h5 className="mb-2 text-success">üí∞ Quy·ªÅn l·ª£i</h5>
                    <p>{job.salaryMin} - {job.salaryMax} $</p>
                </div>
            </Col>

            <Col md={4} className="border-start ps-4">
                <Card className="mb-3 p-3 text-center shadow-sm rounded-3 bg-light">
                    <Card.Img variant="top" src={company} className="mb-3 rounded" />
                    <h6 className="fw-bold">V·ªÅ c√¥ng ty</h6>
                    <p>{job.company?.about || "C√¥ng ty chuy√™n v·ªÅ c√¥ng ngh·ªá, lu√¥n ƒë·ªïi m·ªõi v√† s√°ng t·∫°o."}</p>

                    <h6 className="mt-3 fw-bold">üöÄ C∆° h·ªôi ph√°t tri·ªÉn</h6>
                    <ul className="text-start small">
                        <li>M√¥i tr∆∞·ªùng nƒÉng ƒë·ªông, s√°ng t·∫°o</li>
                        <li>ƒê√†o t·∫°o chuy√™n s√¢u</li>
                        <li>Ph√°t tri·ªÉn k·ªπ nƒÉng leadership</li>
                    </ul>
                </Card>
            </Col>
        </Row>
    </Card>
</Container>
    );
};

export default JobDetail;